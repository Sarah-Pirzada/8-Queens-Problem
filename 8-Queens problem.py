# -*- coding: utf-8 -*-
"""Untitled99.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IaCwcHy5Yzi4svg0FV1SVu35Gr6yImNJ
"""

import random

class EightQueensGeneticAlgorithm:
    def __init__(self, population_size=100, generations=1000, crossover_prob=0.8, mutation_prob=0.2):
        self.population_size = population_size
        self.generations = generations
        self.crossover_prob = crossover_prob
        self.mutation_prob = mutation_prob
        self.population = self.initialize_population()

    def initialize_population(self):
        return [[random.randint(0, 7) for _ in range(8)] for _ in range(self.population_size)]

    def calculate_fitness(self, board):
        conflicts = 0
        for i in range(8):
            for j in range(i + 1, 8):
                if board[i] == board[j] or abs(board[i] - board[j]) == abs(i - j):
                    conflicts += 1
        return 28 - conflicts

    def select_parents(self, fitness_scores):
        total_fitness = sum(fitness_scores)
        probabilities = [score / total_fitness for score in fitness_scores]
        parents = random.choices(self.population, weights=probabilities, k=2)
        return parents

    def crossover(self, parent1, parent2):
        if random.random() < self.crossover_prob:
            crossover_point = random.randint(1, 6)
            child1 = parent1[:crossover_point] + parent2[crossover_point:]
            child2 = parent2[:crossover_point] + parent1[crossover_point:]
            return child1, child2
        else:
            return parent1, parent2

    def mutate(self, individual):
        if random.random() < self.mutation_prob:
            mutation_point = random.randint(0, 7)
            individual[mutation_point] = random.randint(0, 7)
        return individual

    def evolve(self):
        for _ in range(self.generations):
            fitness_scores = [self.calculate_fitness(individual) for individual in self.population]
            new_population = []

            for _ in range(self.population_size // 2):
                parent1, parent2 = self.select_parents(fitness_scores)
                child1, child2 = self.crossover(parent1, parent2)
                child1 = self.mutate(child1)
                child2 = self.mutate(child2)
                new_population.extend([child1, child2])

            self.population = new_population

        best_individual = max(self.population, key=self.calculate_fitness)
        best_fitness = self.calculate_fitness(best_individual)

        return best_individual, best_fitness

# Example Usage:
eight_queens_ga = EightQueensGeneticAlgorithm()
best_solution, best_fitness = eight_queens_ga.evolve()

print(f"Best Solution (Queen Positions): {best_solution}")
print(f"Best Fitness: {best_fitness}")